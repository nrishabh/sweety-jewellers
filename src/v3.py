#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Nov 12, 2022 10:16:28 PM IST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from db import generate_jpgs
from utils import select_file, select_folder, save_settings, load_settings
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import v3_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    _style_code_ran = 1

class mainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x560+341+32")
        top.minsize(120, 1)
        top.maxsize(1284, 701)
        top.resizable(1,  1)
        top.title("SJ Catalog Generator")
        top.configure(background="#eff7ff")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        menubar = tk.Menu(self.top)  
        menubar.add_command(label="Load Settings", command=lambda: load_settings(self))  
        menubar.add_command(label="Save Settings", command=lambda: save_settings(self))        
        top.config(menu=menubar)

        _style_code()
        self.lblHeading = ttk.Label(self.top)
        self.lblHeading.place(relx=0.017, rely=0.009, height=50, width=580)
        self.lblHeading.configure(background="#eff7ff")
        self.lblHeading.configure(foreground="#000000")
        self.lblHeading.configure(font="-family {Arial} -size 14 -weight bold")
        self.lblHeading.configure(relief="flat")
        self.lblHeading.configure(anchor='center')
        self.lblHeading.configure(justify='center')
        self.lblHeading.configure(text='''Sweety Jewellers Catalog Generator''')
        self.lblHeading.configure(compound='left')

        self.frameMainXLSX = ttk.Frame(self.top)
        self.frameMainXLSX.place(relx=0.017, rely=0.107, relheight=0.089
                , relwidth=0.967)
        self.frameMainXLSX.configure(relief='groove')
        self.frameMainXLSX.configure(borderwidth="2")
        self.frameMainXLSX.configure(relief="groove")

        self.entryMainXLSXPath = ttk.Entry(self.frameMainXLSX)
        self.entryMainXLSXPath.place(relx=0.017, rely=0.2, relheight=0.6
                , relwidth=0.707)
        self.entryMainXLSXPath.configure(font="-family {Arial} -size 9")
        self.entryMainXLSXPath.configure(state='readonly')
        self.entryMainXLSXPath.configure(takefocus="")
        self.entryMainXLSXPath.configure(cursor="ibeam")

        self.btnLoadMainXLSX = ttk.Button(self.frameMainXLSX)
        self.btnLoadMainXLSX.place(relx=0.733, rely=0.2, height=30, width=145)
        self.btnLoadMainXLSX.configure(takefocus="")
        self.btnLoadMainXLSX.configure(text='''Load Main XLSX''')
        self.btnLoadMainXLSX.configure(compound='left')
        self.btnLoadMainXLSX.configure(command=lambda: select_file(self.entryMainXLSXPath))
        
        self.framePriceCols = ttk.Frame(self.top)
        self.framePriceCols.place(relx=0.017, rely=0.429, relheight=0.088
                , relwidth=0.967)
        self.framePriceCols.configure(relief='groove')
        self.framePriceCols.configure(borderwidth="2")
        self.framePriceCols.configure(relief="groove")

        self.entryPriceCols = ttk.Entry(self.framePriceCols)
        self.entryPriceCols.place(relx=0.172, rely=0.204, relheight=0.612
                , relwidth=0.569)
        self.entryPriceCols.configure(font="-family {Arial} -size 9")
        self.entryPriceCols.configure(takefocus="")
        self.entryPriceCols.configure(cursor="ibeam")

        self.lblPriceCols = ttk.Label(self.framePriceCols)
        self.lblPriceCols.place(relx=0.017, rely=0.204, height=30, width=85)
        self.lblPriceCols.configure(background="#d9d9d9")
        self.lblPriceCols.configure(foreground="#000000")
        self.lblPriceCols.configure(font="TkDefaultFont")
        self.lblPriceCols.configure(relief="flat")
        self.lblPriceCols.configure(anchor='e')
        self.lblPriceCols.configure(justify='left')
        self.lblPriceCols.configure(text='''Price Columns:''')
        self.lblPriceCols.configure(compound='left')

        self.lblLabelsPerLine = ttk.Label(self.framePriceCols)
        self.lblLabelsPerLine.place(relx=0.75, rely=0.204, height=30, width=90)
        self.lblLabelsPerLine.configure(background="#d9d9d9")
        self.lblLabelsPerLine.configure(foreground="#000000")
        self.lblLabelsPerLine.configure(font="TkDefaultFont")
        self.lblLabelsPerLine.configure(relief="flat")
        self.lblLabelsPerLine.configure(anchor='e')
        self.lblLabelsPerLine.configure(justify='left')
        self.lblLabelsPerLine.configure(text='''Labels Per Line:''')
        self.lblLabelsPerLine.configure(compound='left')

        self.entryLabelsPerLine = ttk.Entry(self.framePriceCols)
        self.entryLabelsPerLine.place(relx=0.914, rely=0.204, relheight=0.612
                , relwidth=0.069)
        self.entryLabelsPerLine.configure(font="-family {Arial} -size 9")
        self.entryLabelsPerLine.configure(takefocus="")
        self.entryLabelsPerLine.configure(cursor="ibeam")

        self.frameButtons = ttk.Frame(self.top)
        self.frameButtons.place(relx=0.017, rely=0.643, relheight=0.089
                , relwidth=0.967)
        self.frameButtons.configure(relief='groove')
        self.frameButtons.configure(borderwidth="2")
        self.frameButtons.configure(relief="groove")

        self.scrolltxtStdOut = ScrolledText(self.top)
        self.scrolltxtStdOut.place(relx=0.017, rely=0.75, relheight=0.161
                , relwidth=0.967)
        self.scrolltxtStdOut.configure(background="white")
        self.scrolltxtStdOut.configure(font="-family {Consolas} -size 9")
        self.scrolltxtStdOut.configure(state="disabled")
        self.scrolltxtStdOut.configure(foreground="black")
        self.scrolltxtStdOut.configure(highlightbackground="#d9d9d9")
        self.scrolltxtStdOut.configure(highlightcolor="black")
        self.scrolltxtStdOut.configure(insertbackground="black")
        self.scrolltxtStdOut.configure(insertborderwidth="3")
        self.scrolltxtStdOut.configure(selectbackground="#c4c4c4")
        self.scrolltxtStdOut.configure(selectforeground="black")
        self.scrolltxtStdOut.configure(wrap="none")

        self.framePurchaseXLSX = ttk.Frame(self.top)
        self.framePurchaseXLSX.place(relx=0.017, rely=0.214, relheight=0.089
                , relwidth=0.967)
        self.framePurchaseXLSX.configure(relief='groove')
        self.framePurchaseXLSX.configure(borderwidth="2")
        self.framePurchaseXLSX.configure(relief="groove")

        self.entryPurchaseXLSXPath = ttk.Entry(self.framePurchaseXLSX)
        self.entryPurchaseXLSXPath.place(relx=0.017, rely=0.2, relheight=0.6
                , relwidth=0.707)
        self.entryPurchaseXLSXPath.configure(font="-family {Arial} -size 9")
        self.entryPurchaseXLSXPath.configure(state='readonly')
        self.entryPurchaseXLSXPath.configure(takefocus="")
        self.entryPurchaseXLSXPath.configure(cursor="ibeam")

        self.btnLoadPurchaseXLSX = ttk.Button(self.framePurchaseXLSX)
        self.btnLoadPurchaseXLSX.place(relx=0.733, rely=0.2, height=30
                , width=145)
        self.btnLoadPurchaseXLSX.configure(takefocus="")
        self.btnLoadPurchaseXLSX.configure(text='''Load Pur. Order XLSX''')
        self.btnLoadPurchaseXLSX.configure(compound='left')
        self.btnLoadPurchaseXLSX.configure(command=lambda: select_file(self.entryPurchaseXLSXPath))

        self.frameImagesFolder = ttk.Frame(self.top)
        self.frameImagesFolder.place(relx=0.017, rely=0.321, relheight=0.089
                , relwidth=0.967)
        self.frameImagesFolder.configure(relief='groove')
        self.frameImagesFolder.configure(borderwidth="2")
        self.frameImagesFolder.configure(relief="groove")

        self.entryImagesFolder = ttk.Entry(self.frameImagesFolder)
        self.entryImagesFolder.place(relx=0.164, rely=0.2, relheight=0.6
                , relwidth=0.741)
        self.entryImagesFolder.configure(font="-family {Arial} -size 9")
        self.entryImagesFolder.configure(state='readonly')
        self.entryImagesFolder.configure(takefocus="")
        self.entryImagesFolder.configure(cursor="ibeam")

        self.btnSelectImagesFolder = ttk.Button(self.frameImagesFolder)
        self.btnSelectImagesFolder.place(relx=0.914, rely=0.2, height=30
                , width=40)
        self.btnSelectImagesFolder.configure(takefocus="")
        self.btnSelectImagesFolder.configure(text='''...''')
        self.btnSelectImagesFolder.configure(compound='left')
        self.btnSelectImagesFolder.configure(command=lambda: select_folder(self.entryImagesFolder))

        self.lblImagesFolder = ttk.Label(self.frameImagesFolder)
        self.lblImagesFolder.place(relx=0.017, rely=0.2, height=32, width=80)
        self.lblImagesFolder.configure(background="#d9d9d9")
        self.lblImagesFolder.configure(foreground="#000000")
        self.lblImagesFolder.configure(font="TkDefaultFont")
        self.lblImagesFolder.configure(relief="flat")
        self.lblImagesFolder.configure(anchor='e')
        self.lblImagesFolder.configure(justify='left')
        self.lblImagesFolder.configure(text='''Images Folder:''')
        self.lblImagesFolder.configure(compound='left')

        self.frameOutputFolder = ttk.Frame(self.top)
        self.frameOutputFolder.place(relx=0.017, rely=0.536, relheight=0.089
                , relwidth=0.967)
        self.frameOutputFolder.configure(relief='groove')
        self.frameOutputFolder.configure(borderwidth="2")
        self.frameOutputFolder.configure(relief="groove")

        self.entryOutputFolder = ttk.Entry(self.frameOutputFolder)
        self.entryOutputFolder.place(relx=0.164, rely=0.2, relheight=0.6
                , relwidth=0.741)
        self.entryOutputFolder.configure(font="-family {Arial} -size 9")
        self.entryOutputFolder.configure(state='readonly')
        self.entryOutputFolder.configure(takefocus="")
        self.entryOutputFolder.configure(cursor="ibeam")

        self.btnSelectOutputFolder = ttk.Button(self.frameOutputFolder)
        self.btnSelectOutputFolder.place(relx=0.914, rely=0.2, height=30
                , width=40)
        self.btnSelectOutputFolder.configure(takefocus="")
        self.btnSelectOutputFolder.configure(text='''...''')
        self.btnSelectOutputFolder.configure(compound='left')
        self.btnSelectOutputFolder.configure(command=lambda: select_folder(self.entryOutputFolder))

        self.lblOutputFolder = ttk.Label(self.frameOutputFolder)
        self.lblOutputFolder.place(relx=0.017, rely=0.2, height=32, width=80)
        self.lblOutputFolder.configure(background="#d9d9d9")
        self.lblOutputFolder.configure(foreground="#000000")
        self.lblOutputFolder.configure(font="TkDefaultFont")
        self.lblOutputFolder.configure(relief="flat")
        self.lblOutputFolder.configure(anchor='e')
        self.lblOutputFolder.configure(justify='left')
        self.lblOutputFolder.configure(text='''Output Folder:''')
        self.lblOutputFolder.configure(compound='left')

        self.ProgressBar = ttk.Progressbar(self.top)
        self.ProgressBar.place(relx=0.017, rely=0.929, relwidth=0.967
                , relheight=0.0, height=30)

        self.btnGenJPG = ttk.Button(self.frameButtons)
        self.btnGenJPG.place(relx=0.017, rely=0.2, height=30, width=275)
        self.btnGenJPG.configure(takefocus="")
        self.btnGenJPG.configure(text='''Generate JPGs''')
        self.btnGenJPG.configure(compound='left')
        self.btnGenJPG.configure(command=lambda: generate_jpgs(
            self.entryMainXLSXPath,
            self.entryPurchaseXLSXPath,
            self.entryImagesFolder,
            self.entryOutputFolder,
            self.entryLabelsPerLine,
            self.entryPriceCols,
            self.ProgressBar))

        self.btnGenPDF = ttk.Button(self.frameButtons)
        self.btnGenPDF.place(relx=0.5, rely=0.2, height=30, width=275)
        self.btnGenPDF.configure(takefocus="")
        self.btnGenPDF.configure(text='''Generate PDF''')
        self.btnGenPDF.configure(compound='left')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    v3_support.main()

if __name__ == '__main__':
    v3_support.main()




